# 4.1 У нас є список показань заборгованостей з комунальних послуг наприкінці місяця. Заборгованості можуть бути від'ємними 
# — у нас переплата, чи додатними, якщо необхідно сплатити за рахунками. Напишіть функцію amount_payment, яка приймає 
# на вхід список платежів, підсумовує додатні значення та повертає суму платежу наприкінці місяця.
# -----------------------------------------------------------------------------------------------

def amount_payment(payment):
    payment_all = list(payment)
    sum = 0
    
    for payment in payment_all:
        if payment >= 0:
            sum += payment
        else:
            sum +=0
    return sum 

# 4.2 При аналізі даних часто виникає необхідність позбавитися екстремальних значень, перш ніж почати працювати з даними далі.
# Напишіть функцію prepare_data, яка видаляє з переданого списку найбільше та найменше значення, сортує його в порядку зростання
# і повертає змінений список як результат.
# -----------------------------------------------------------------------------------------------

def prepare_data(data):
    value =list(data)
    value = sorted(value)
    del value[0]
    del value[-1]
    return value
# 4.3 Ми розробляємо кулінарний блог. І в рецептах, при написанні списку інгредієнтів, ми розділяємо їх комами,
# а перед останнім ставимо союз "and", як у прикладі нижче:
# 2 eggs, 1 liter sugar, 1 tsp salt and vinegar
# Напишіть функцію format_ingredients, яка прийматиме на вхід список з інгредієнтів ["2 eggs", "1 liter sugar", "1 tsp salt", "vinegar"]
# та повертатиме рядок зібраний з його елементів в описаний вище спосіб. Ваша функція має вміти обробляти списки будь-якої довжини.
# -----------------------------------------------------------------------------------------------

def format_ingredients(items):
    if len(items) > 2:
        first = items
        list_items = first[-1] 
        list_items1 = first[-2]
        all_list_items = list_items1 + ' and ' + list_items
        first.pop()
        first.pop()
        string_items = ', '.join(first) + ',' + ' ' + all_list_items
        return str(string_items)
    elif len(items) == 2:
        return " and ".join(items)
    else:
        return ''.join(items)
    
# 4.4 Сучасна система оцінок в університеті має такий вигляд:
# Оцінка	Бали	Оцінка ECTS	Пояснення
# 1	0-34	F	Unsatisfactorily
# 2	35-59	FX	Unsatisfactorily
# 3	60-66	E	Enough
# 3	67-74	D	Satisfactorily
# 4	75-89	C	Good
# 5	90-95	В	Very good
# 5	96-100	A	Perfectly
# Реалізуйте дві функції. Перша буде використовуватись у бухгалтерії при розрахунку стипендії, get_grade приймає ключ у вигляді оцінки ECTS,
# і має повертати відповідну п'ятибальну оцінку (перший стовпчик таблиці). Друга get_description теж приймає ключ у вигляді оцінки ECTS,
# але повертатиме пояснення оцінки в текстовому форматі (останній стовпчик таблиці) і буде використана в електронній заліковій книжці студента.
# На відсутній ключ функції повинні повертати значення None .
# -----------------------------------------------------------------------------------------------

def get_grade(key):
    assessment = {'F':1, 'FX':2, 'E':3, 'D':3,	'C':4, 'B':5, 'A':5}  
    return assessment.get(key)

def get_description(key):
    assessment = {'F':'Unsatisfactorily', 'FX':'Unsatisfactorily', 'E':'Enough', 'D':'Satisfactorily',	'C':'Good', 'B':'Very good', 'A':'Perfectly'}  
    return assessment.get(key)

# 4.5 Як ми знаємо, ключ у словнику має бути унікальним, тоді як значення його ні. Реалізуйте функцію lookup_key для пошуку 
# всіх ключів за значенням у словнику. Першим параметром у функцію ми передаємо словник, а другим — значення, що хочемо знайти.
# Таким чином, результат може бути як список ключів, так і порожній список, якщо ми нічого не знайдемо.
# -----------------------------------------------------------------------------------------------

def lookup_key(data, value):
    keys = [key for key, values in data.items() if values == value]
    return keys

# 4.6 У нас є список показників студентів групи – це список з отриманими балами з тестування. Необхідно поділити список на дві частини.
# Напишіть функцію split_list, яка приймає список (цілі числа), знаходить середнє значення бала у списку та ділить його на два списки.
# У перший потрапляють значення менше середнього, включаючи середнє значення, тоді як у другий — строго більше від середнього. 
# Функція повертає кортеж цих двох списків. Для порожнього списку повертаємо два порожні списки.
# -----------------------------------------------------------------------------------------------


