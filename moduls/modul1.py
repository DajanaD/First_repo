# 1.1 Коли в програмуванні говорять про змінну, мають на увазі іменоване місце для зберігання даних, таких як числа, текст, 
# списки з числами або символами та т.і. Якщо провести аналогію, то змінну можна визначити як ярлик, яким позначені певні дані.
# Для створення змінних використовують таку конструкцію
# field = 'name'
# cost = 200
# Імена змінних можуть складатися з латинських букв, цифр та знака підкреслення _, проте не можна, щоб змінна починалася з цифри. Прогалини в іменах змінних неприпустимі, але замість цього, слова розділяють знаками підкреслення, щоб ім'я змінної мало сенс, який ми вкладаємо при її використанні.
# total_price = 120
# І пам'ятайте, що змінні не повинні співпадати із зарезервованими словами мови. Інакше компілятор не зможе зрозуміти оператор це чи змінна.
# --------------------------------------------------------------------------------------------------------------------------------

name = 'Diana'
age = 39

# 1.2 За допомогою операторів ми виконуємо основні арифметичні операції. Символи, за допомогою яких виконуються операції Python,
# називаються операторами. Основні математичні оператори перераховані нижче у таблиці.
# Символ	Операція
# +	Додавання
# -	Віднімання
# *	Множення
# /	Ділення
# %	Залишок від ділення
# //	Цілісний поділ
# **	Зведення в ступінь
# Приклад найпростішої операції:
# a = 5
# b = a - 3  # 2
# Ми зробили операцію віднімання: з числа 5 (зберігається в змінній a) відняли число 3 та отримали в змінній b число, що дорівнює 2
# --------------------------------------------------------------------------------------------------------------------------------

rate = 1.68
value = 150
payment = rate * value

# 1.3 Математичні операції виконуються по черзі, залежно від їхнього пріоритету (якщо не задати іншу черговість за допомогою дужок). 
# Множення та ділення мають вищий пріоритет, ніж додавання та віднімання.
# ratio = 10
# result = 8 * (ratio + 5) - ratio ** 2
# Виразом називається сукупність змінних, операцій, імен функцій, дужок, які можна обчислити відповідно до синтаксису Python.
# Наприклад, 8 * (ratio + 5) - ratio**2 - це вираз, 8 * (ratio + 5) - вираз, ratio**2 - вираз і т.д.
# Якщо виникає подвійна ситуація при читанні виразу, намагайтеся їх групувати разом, за допомогою дужок. Візьмемо, наприклад, 
# зведення у ступінь негативного числа -3 і зведемо його у квадрат. На папері ми вчинили б саме так:
# -3 ** 2  # -9
# Ми отримаємо -9, але це швидше за все не той результат, що ви хотіли. А річ у тім, що в Python пріоритет операції зведення
# в ступінь вищий за заперечення. Тому обертаємо -3 у дужки та отримуємо очікуваний результат.
# (-3) ** 2  # 9
# --------------------------------------------------------------------------------------------------------------------------------


rate = 1.68
value_day = 120
value_night = 30
payment = rate * value_day + rate / 2 * value_night

# 1.4 Коментарі в коді програми дуже корисні у будь-якій мові програмування. Поки що ми розглядаємо приклади програми,
# які досить прості, але зі зростанням складності коду в програми додають коментарі, що описують загальний підхід до
# розв'язуваної задачі, — свого роду нотатки, написані зрозумілою мовою. Ця інформація буває дуже корисною,
# якщо доводиться повертатися до своєї програми через довгий час або розумітися на коді, написаному іншим розробником.
# При виконанні програми комп'ютер ігнорує всі коментарі в коді, вони є там виключно для людини.
# Для Python коментар починається з символу ґрат (#). Інтерпретатор Python ігнорує всі символи, що наведені в коді після # до кінця рядка. 
# Приклад:
# ratio = 10  # коефіцієнт корекції
# result = 8 * (ratio + 5) - ratio ** 2
# --------------------------------------------------------------------------------------------------------------------------------

rate = 1.68
value_day = 358
value_night = 103
#Payment for electricity for the current month
payment = rate * value_day + rate / 2 * value_night

# 1.5 У більшості випадків програми визначають або збирають якісь набори даних, а потім трансформують їх під свої потреби.
# Виділимо основні типи даних для Python і почнемо з рядків тексту.
# Рядок є простою послідовністю символів. Будь-яка послідовність символів, укладена в лапки, Python вважається рядком. 
# Лапки можуть бути як одинарні, так і подвійні.
# --------------------------------------------------------------------------------------------------------------------------------

'First string'
"Second string"

first_name = 'Diana'
last_name = 'Sukhina'

# 1.6 Найпоширеніші операції, які доводиться виконувати зі значеннями рядкових типів даних, — це їхня конкатенація, 
# визначення довжини рядка та вилучення певних символів та підрядків. Але цим ми будемо займатися у модулі №5, 
# а зараз поговоримо про конкатенацію.
# Рядки в Python можна конкатенувати за допомогою оператора додавання (+). В результаті рядок, що стоїть праворуч 
# оператора конкатенації буде додано в кінець рядка, що стоїть зліва, з утворенням нового рядкового значення.
# first = 'Hello'
# second = 'world'
# sentence = first + ' ' + second + '!'  # Hello world!
# У змінній sentence у нас в результаті опиниться рядок 'Hello world!'
# --------------------------------------------------------------------------------------------------------------------------------

first_name = 'Diana'
last_name = 'Sukhina'
full_name = first_name + ' ' + last_name

# 1.7 Попередній приклад ми могли б оформити гарніше за допомогою f-рядків. Вони застосовуються для форматування рядків та 
# виконуються під час самої програми. Фактично це шаблон, що дозволяє формувати нам рядок, підставляючи в нього результат виконання
# інших виразів у потрібне нам місце.
# Від звичайного рядка, f-рядок відрізняється тим, що на початку рядка ми ставимо символ f. Інтерпретатор розуміє, що всередині
# такого рядка він зустріне символи фігурних дужок { }, всередині яких міститься вираз, що необхідно виконати та результат підставити у рядок.
# first = 'Hello'
# second = 'world'
# sentence = f"{first} {second}!"  # Hello world!
# У змінній sentence у нас в результаті опиниться рядок 'Hello world!'
# --------------------------------------------------------------------------------------------------------------------------------

first_name = "John"
last_name = "Smith"
full_name = first_name + " " + last_name
message = f"Dear {first_name}, we inform you that you have purchased a ticket to travel to the island of Mauritius. Departure June 31 of this year. Have a passport at {full_name}. We are looking forward to seeing you!"

# 1.8 Настав час чисел. У програмуванні вони використовуються для ведення рахунку в іграх, представлення даних у візуалізаціях,
# зберігання інформації у вебдодатках тощо. У Python числові дані розділені на кілька категорій, згідно з тим, як вони використовуються. 
# Найменше проблем для програміста приносить робота з цілими числами. Ми вже познайомилися з основними операціями над числами в одному 
# з перших розділів.
# У Python числа, що мають дробову частину, називаються дійсними числами (або, як заведено говорити, "числами з плаваючою комою"). 
# Зазвичай ми їх використовуємо і не особливо замислюємося про поведінку цих чисел, але бувають ситуації, коли числа можуть поводитися 
# несподівано для нас
# a = 0.2 + 0.1  # 0.30000000000000004
# Ця ситуація може статися незалежно від мови програмування, і пов'язана вона з внутрішнім представленням чисел комп' ютером. 
# Тому порівняння дійсних чисел можливе лише з певною точністю, наприклад, до шостого знака після коми. Це коли порівнюють між 
# собою не два числа, а їх різницю з точністю до 0.000001, та перевіряють вона менше точності чи ні. Якщо при обчисленнях точність
# стає важливою, варто звернути увагу на модуль decimal
# --------------------------------------------------------------------------------------------------------------------------------

length = 2.75
width = 1.75
area = length * width
show = f"With width {width} and length {length} of the room, its area is equal to {area}"

# 1.9 У Python вбудовані також комплексні числа. Запис таких чисел відбувається у вигляді пари значень: дійсної та уявної частини, які поділяються символом операції додавання. На кінці уявної складової частини комплексного числа обов'язково ставлять букву j. У наступному прикладі ми створюємо комплексну змінну:
# complex = 3.14 + 1j
# print(complex)  # (3.14+1j)
# Щоб отримати дійсну та уявну частину чисел, окремо необхідно використовувати властивості real та imag:
# complex = 3.14 + 1j
# print(complex.real)  # 3.14
# print(complex.imag)  # 1.0
# Основна сфера застосування комплексних чисел — це наукові розрахунки з математики, квантової механіки, електротехніки тощо.
# --------------------------------------------------------------------------------------------------------------------------------

a =-2 + 3j
b =4 + 2.1j
result = a + b

# 1.10 Для роботи з числами в Python існує один з найважливіших модулів math (для комплексних чисел існує окремий модуль cmath).
# Цей модуль надає великий функціонал для роботи з числовими даними.
# Щоб додати модуль до своєї програми, необхідно виконати імпорт цього модуля за допомогою ключового слова import Наприклад,
# щоб знайти квадратний корінь із числа, треба використати метод sqrt модуля math
# import math
# a = math.sqrt(100)  # 10.0
# Докладно робота з модулями розглядається далі за курсом, поки ми користуємося готовими нам методами.
# --------------------------------------------------------------------------------------------------------------------------------

import math

a = -2
b = 7
c = -6
D = b ** 2 - 4 * a * c
x1 =(-b + D ** 0.5) / (2 * a)
x2 =(-b - D ** 0.5) / (2 * a)

# 1.11 Булевим називається вираз, що повертає тільки True або False. Такі вирази називаються булевими на честь Джорджа Буля 
# (George Boole) (1815-1864) - піонера в галузі формальної логіки.
# Для порівняння значень змінних між собою у Python є оператори відносин:
# < (менше)
# <= (менше або дорівнює)
# > (більше)
# >= (більше або дорівнює)
# == (дорівнює)
# != (не дорівнює)
# Приклад:
# 1 > 2  # False
# bool — True/False підтип цілих чисел. Може приймати значення 1 (відповідає True) або 0 ( відповідає False).
# -------------------------------------------------------------------------------------------------------------------------------

is_active = True
is_delete = False

# 1.12 Підіб'ємо короткий підсумок. Як бачимо, у Python змінні можуть бути різного типу. Це означає, що змінна може зберігати 
# інформацію у різних форматах:
# None — порожнє значення або "ніякий" тип даних.
# Числа (Numeric Type)
# Boolean — булев (логічний) тип. Є підтипом цілих чисел.
# Рядки (Text Sequence Type)
# З нового для нас тут лише тип None. Ним у Python позначають порожнє значення.
# result = None
# None використовується тоді, коли треба явно повернути якесь значення або створити його (зарезервувати ім'я для чогось) ,
# але по суті й сенсу ніякої корисної інформації поки що зберегти в цьому значенні не можна, навіть якого роду ця інформація 
# (рядок або число, або щось інше) поки що не ясно. У таких випадках застосовують None.
# Інші типи ми розглянули вже докладно.
# --------------------------------------------------------------------------------------------------------------------------------

name = 'Diana'
age = 20
is_active = True
subscription = None

# 1.13 Python - це мова з динамічною строгою типізацією. Це означає, що та сама змінна може змінювати свій тип в міру виконання нових інструкцій,
# але інтерпретатор автоматично не змінюватиме тип даних.
# age = input("How old are you?")
# Функція input повертає тип str — рядок і порівняти значення age з числом 18 — не можна, бо незрозуміло, як має відбуватися таке порівняння.
# Але можна перетворити тип змінної age в int за допомогою вбудованої функції int (функція називається так само як і тип):
# age = input("How old are you? ")
# age = int(age)
# Для перетворення рядків у числа з крапкою можна використовувати функцію float:
# pi = float('3.14')
# Також можна перетворити практично будь-який Python об'єкт у рядок функцією str:
# pi_str = str(3.14)
# age_str = str(29)
# Для приведення інших типів даних до булевого типу використовується функція bool() Функція bool() поверне False у наступних випадках
# порожній рядок
# нульове число
# порожній список/кортеж
# В інших випадках функція поверне True
# bool(0)  # False
# bool(1)  # True
# --------------------------------------------------------------------------------------------------------------------------------------

length = "2.75"
width = "1.75 "
area =float(length) * float(width)
show = f"With width {width} and length {length} of the room, its area is equal to {area}"

# 1.14 Програмісти часто працюють із геоданими. Попрацюємо і ми з ними. Нам необхідно написати програму, 
# в якій ми розрахуємо відстань між двома точками на поверхні Землі.
# Рахуватимемо відстань між двома містами: Києвом та Лондоном
# Координати Києва в градусах:
# Широта lat1 = 50.45
# Довгота lon1 = 30.523
# Координати Лондона в градусах:
# Широта lat2 = 51.5072
# Довгота lon2 = -0.1275
# Радіус Землі приймемо 6371.01 км. Відстань у кілометрах між містами з урахуванням викривленості планети можна знайти за такою формулою:
# distance = 6371.01 · arccos(sin(lat1) · sin(lat2) + cos(lat1) · cos(lat2) · cos(lon1 - lon2))
# Пам'ятайте, що тригонометричні функції в Python оперують радіанами. Тобто величини із градусів необхідно перекласти
# у радіани, перш ніж обчислювати відстань між точками. Для цього в модулі math є функція radians
# <радіани> = math.radians(<градуси>)
# Також:
# arccos(x) — це math.acos(x)
# sin(x) — це math.sin(x)
# cos(x) — це math.cos(x)
# Обчисліть distance за вказаною формулою за допомогою запропонованих методів модуля math.import math
# --------------------------------------------------------------------------------------------------------------------------------

RADIUS = 6371.01

lat1 = math.radians(50.45)
lon1 = math.radians(30.523)

lat2 = math.radians(51.5072)
lon2 = math.radians(-0.1275)

distance =RADIUS * math.acos(math.sin(lat1) * math.sin(lat2) + math.cos(lat1)* math.cos(lat2) * math.cos(lon1 - lon2))

# 1.15 Ми вже працювали з функцією введення, вона використовується для читання введення з клавіатури. Виклик цієї функції змушує 
# інтерпретатор зупинити виконання програми та чекати введення користувача з клавіатури.
# Якщо користувач натиснув клавішу Enter, всі введені раніше символи, після запрошення введення, повертаються функцією input,
# і виконання програми продовжується.
# Щоб використовувати ці дані ми привласнюємо змінній значення, що поверне функція input. Наприклад, наступний приклад зчитує 
# введення користувача з клавіатури та записує результат у змінну name.
# name = input("Введіть ваше ім'я: ")
# Функція input завжди повертає значення рядкового типу (string). Згідно з логікою, додатку необхідно виконати перетворення 
# значення в цілий тип або дійсний тип.
# У Python функції приведення типу заведено використовувати безпосередньо в тому ж виразі, де запитується введення з клавіатури.
# count = int(input("Скільки яблук ви хочете купити? "))
# ------------------------------------------------------------------------------------------------------------------------------------------

name = input("Your name? ")
email = input("Your email? ")
age = int(input("Your age? "))
height = float(input("Your height? "))
is_active = bool(input("Do you want to receive messages from the site?  "))

# 1.16 Використовуючи приведення типів і input, розв'яжіть задачу для розрахунку площі. Ширина та висота задані за допомогою функції input.
# Необхідно, як і раніше, розрахувати площу, але потрібно рядковий тип перетворити на чисельний (float) при отриманні значення через input.
# Змінну show створювати не треба.
# ------------------------------------------------------------------------------------------------------------------------------------------

length = float(input("What length? "))
width =float(input("What width? "))
area = length * width